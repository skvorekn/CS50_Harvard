Arrays and Sorting Algorithms

Compiling a program: clang filename.c
./a.out
clang -o hello hello.c
./hello
make hello
./hello

clang hello.c -lcs50
// link in cs50

1. preprocessing
the includes at the top of the file
printf is in <stdio.h>
2. compiling
turns into assembly code:
...
main:
    .cfi_startproc
# BB#0:
    pushq   %rbp
etc.
3. assembling
convert assembly language into 0/1s
4. linking
link our 0/1s with stdio.h 0/1s

int or char takes up a certain amount of RAM space
chunks of memory/bytes that are back to back (contiguous memory) = an array

// help50 make bugg0
// style50 bugg0.c

Documentation of functions in terminal:
man functionname
man toupper

key -->
plaintext -->     --> ciphertext
encode in Ascii + 1

Sorting algorithms

1. Bubble sort
Repeat until no swaps
    for i from 0 to n - 2
        if i'th and i+1'th elements out of order
            swap them

2. Selection sort
for i from 0 to n-1
    find smallest element between i'th and n-1'th
    swap smallest with i'th element

Both have roughly the same number of steps
(n-1) + (n-2) + ... + 1 = n(n-1)/2 = ((n^2)/2)-(n/2)
O(n^2)
n^2 has the largest effect of the whole expression

other orders of magnitude:
O(n log n)
O(n) - linear algorithm = 1 page at a time, 2 pages at a time (n, n/2)
O(log n) - another common one
O(1) - constant number of steps

Sort 1/2 list, 1/2 of that
sort left side
then right side
= O(log n)
dividing numerous times

crypt.c resources
Password hashing:
https://crackstation.net/hashing-security.htm
